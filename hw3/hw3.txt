Question 1:
a.
	*stacks are listed from top, {, to bottom, }. 
	Step #1 enqueue 1
			stack1: {1}  stack2: empty
	Step #2 enqueue 2
		stack1: {1,2}  stack2: empty
	Step #3 dequeue
		stack1: empty  stack2: {1}
	Step #4 enqueue 3
		stack1: {3}  stack2: {1}
	Step #5 enqueue 4
		stack1: {3, 4}  stack2: {1}
	Step #6 dequeue
		stack1: {3, 4}  stack2: empty
	Step #7 enqueue 5
		stack1: {3, 4, 5}  stack2: empty
	Step #8 enqueue 6
		stack1: {3, 4, 5, 6}  stack2: empty

b.
	Assuming O(1) runtime for stack functions push(x), pop(), top(), and empty(),
	queue function enqueue runs in O(1) time, because only one stack1.push(x)
	function will be called for every enqueue. 

	However, enqueue has O(n) runtime, because given an empty stack2 and a 
	stack1 of n elements, stack1.pop(), stack1.top() and stack2.push() will all be
	called n times, resulting in O(n) runtime. 

c.
	push(x) taking Θ(1) time, and pop() taking Θ(n) time
	Enqueue will take Θ(1) time, because pop() is never called during enqueue, 
	and push(x) still runs in Θ(1) time. 

	Dequeue will take O(n!) time to run in the worst case. In the worst case,
	stack2 is empty and stack1 has n elements. If this is so, then stack1 must 
	call pop() n times with n decrementing by 1 each call, meaning 

	pop(n) + pop(n-1) + pop(n-2) + ... + pop(1) total pop() calls.
	
	Therefore, the number of pop() calls can be described by the 
	
	summation from i=1 to n of pop(i), which is equivalent to 

	summation from i=1 to n of c*i, which is equivalent to 

	c*n(n+1)/2, which is equal to O(n^2), meaning dequeue() runs in O(n^2) time.

Question 2:
a.
	for (int i = 0; i < n; i ++) //loops n times
	    if (A[i] == 0) {
	       for (int j = 1; j < n; j *= 2)  //loops log(n) times
	          { /* do something that takes O(1) time */ }
	    }
	}

	The 'j' for loop runs log(n) times
		2^j = n, because j*=2 after each iteration
		j = log(n)

	In the worst case, A[i] == 0 is always true, so for all n times the 'i' loop
	iterates, the 'j' loop runs, meaning Θ(nlog(n)) runtime in the worst case. 

	In the best case, A[i] == 0 is never true, so for all n times the 'i' loop
	iterates, the 'j' loop never runs, meaning Θ(n) runtime in the best case. 

b.  
	int tally=0;
	for (int i = 1; i < n; i ++) // loops n times
	{
	   for (int j = i; j < n; j ++) // loops n times
	   {
	        if (j % i == 0)
	        {
	            for (int k = 1; k < n; k *= 2)  //Θ(logn) time, for same reason as part (a) 
	            { 
	                tally++;
	            }
	        }
	   }
	}

	loop 'k' runs in Θ(logn) time. 
	loop 'j' contains an if statement, which causes loop 'k' to run when true, but has 
	O(1) runtime when false. 
	loop 'j's iterations can be expressed in terms of n, as a result of the if statement.
	loop 'j's runtime is (n/i)*logn, because the if statement is true only for multimples of i in j, 
	which is equivalent to calling loop 'k' n/i times. The runtime is negligible (O(1)) when the if statement is false. 
	loop 'i' calls loop 'j' i times, and the total runtime is equivalent to

	summation from i to n of (n/i)*logn, which is equivalent to
	n*logn* summation from i=1 to n of (1/i), which is a partial harmonic series sum that simplies to O(logn), so
	the runtime is Θ(n*(log(n))^2)

c.
	int *a = new int [10];
	int size = 10;
	for (int i = 0; i < n; i++) 
	{
	   if (i == size)
	   {  
	       int newsize = size+10;
	       int *b = new int [newsize];
	       for (int j = 0; j < size; j++) b[j] = a[j];
	       delete [] a;
	       a = b;
	       size = newsize;
	   }
	   a[i] = sqrt(i);
	}

	loop 'j' iterates i times, i == size 
	loop 'i' iterates n times
	Therefore, loop 'j' is the largest runtime operation within loop i, assuming sqrt(i) runs in O(1) time. 
	The if statement (i==size) is true for every 10th loop of i, which means loop 'j' runs n/10 times. 
	The runtime can then be wrtten as the
	summation from i=1 to n/10 of 10*i, which simplifies to
	10* summation from i=1 to n/10 of i, which simplfies to 
	O(10*(n^2/100)) which simplifies to Θ(n^2).

d. 
	int *a = new int [10];
	int size = 10;
	for (int i = 0; i < n; i++) 
	{
	   if (i == size)
	   {  
	       int newsize = 2*size;
	       int *b = new int [newsize];
	       for (int j = 0; j < size; j++) b[j] = a[j];
	       delete [] a;
	       a = b;
	       size = newsize;
	   }
	   a[i] = sqrt(i);
	}

	loop 'i' runs n times but because newsize =2*size, 
	i==size is only satisfied z times.
	10*2^z = n 
	2^z = n/10
	z = log_2(n/10)
	Therefore, loop j runs 10*2^i times. The runtime is equal to the 
	summation from i=1 to log_2(n/10) of 10*2^i, which is equal to 
	10 * summation from i=1 to log_2(n/10) of 2^i, which is a geometric series that sums to 
	O(10*2^(log_2(n/10))) = O(10*n/10) = O(n) = Θ(n).
	Therefore, the runtime is Θ(n).
